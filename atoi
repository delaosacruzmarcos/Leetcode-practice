class Solution {
public:
    int myAtoi(string s) {
        int numIdx = 0;
        int sLen = s.length();
        int i = 0;
        int sign = 1;
        int sigX = 0;
//Look through the string until find a number
//While looking  when we find a number check the immediate before to determine sign
        while (!((s[i] >= '0')&&(s[i] <= '9'))){
            if (((s[i] != ' ')&&(s[i] != '-')&&(s[i] != '+'))||(sigX >= 1)) {
                return 0;
            }
            if (s[i] == '-'){
                    sigX++;
            }
            if (s[i] == '+'){
                    sigX++;
            }
            i++;
            cout << "hello"<< endl;
        }
        if (i != 0){
            char posChar = s[i-1];
            if (posChar == '-'){sign = -1;}
            else{sign = 1;}
        }else{sign=1;}
        while (s[i] =='0'){
            i++;
        }
        numIdx = i;
//Iterate to the end of the number
        while (((s[i] >= '0')&&(s[i] <= '9'))&&(i < sLen)){
            i++;
        }
        i--;
        cout << "string Length: ";
        cout << sLen << endl;
        cout << "Indexes that are iterated over" << endl;
        int ex = 0;
        int cur = 0;
        int ret = 0;
        while (i >= numIdx){
            cout << i << endl;
            cur = s[i] - '0';
            cout << "this is the number at index: ";
            cout << cur * pow(10,ex) << endl;
            if(((cur * pow(10,ex) <= 2000000000) && (ret <= 147483647))||((cur == 1)&&(ex <10))){
                ret = ret + (cur * pow(10,ex));
                
            }else{
                    if (sign == 1){
                    return pow(2,31)-1;
                    }else{
                    return (-1 * pow(2,31));
                    }
            }
         cout << "current ret: ";
            cout << ret << endl;
            ex++;
            i--;
        }
        cout << "This is the calculated output: ";
        ret = ret * sign;
        cout << ret << fixed <<setprecision(10)<<endl;
        cout << sign << endl;
        return ret;
    }
};
